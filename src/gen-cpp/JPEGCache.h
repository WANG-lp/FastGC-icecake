/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef JPEGCache_H
#define JPEGCache_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "JPEGCache_types.h"

namespace JPEGCache {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class JPEGCacheIf {
 public:
  virtual ~JPEGCacheIf() {}
  virtual void get(std::string& _return, const std::string& filename) = 0;
  virtual void getWithROI(std::string& _return, const std::string& filename, const int32_t offset_x, const int32_t offset_y, const int32_t roi_w, const int32_t roi_h) = 0;
  virtual int32_t put(const std::string& filenames) = 0;
};

class JPEGCacheIfFactory {
 public:
  typedef JPEGCacheIf Handler;

  virtual ~JPEGCacheIfFactory() {}

  virtual JPEGCacheIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(JPEGCacheIf* /* handler */) = 0;
};

class JPEGCacheIfSingletonFactory : virtual public JPEGCacheIfFactory {
 public:
  JPEGCacheIfSingletonFactory(const ::std::shared_ptr<JPEGCacheIf>& iface) : iface_(iface) {}
  virtual ~JPEGCacheIfSingletonFactory() {}

  virtual JPEGCacheIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(JPEGCacheIf* /* handler */) {}

 protected:
  ::std::shared_ptr<JPEGCacheIf> iface_;
};

class JPEGCacheNull : virtual public JPEGCacheIf {
 public:
  virtual ~JPEGCacheNull() {}
  void get(std::string& /* _return */, const std::string& /* filename */) {
    return;
  }
  void getWithROI(std::string& /* _return */, const std::string& /* filename */, const int32_t /* offset_x */, const int32_t /* offset_y */, const int32_t /* roi_w */, const int32_t /* roi_h */) {
    return;
  }
  int32_t put(const std::string& /* filenames */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _JPEGCache_get_args__isset {
  _JPEGCache_get_args__isset() : filename(false) {}
  bool filename :1;
} _JPEGCache_get_args__isset;

class JPEGCache_get_args {
 public:

  JPEGCache_get_args(const JPEGCache_get_args&);
  JPEGCache_get_args& operator=(const JPEGCache_get_args&);
  JPEGCache_get_args() : filename() {
  }

  virtual ~JPEGCache_get_args() noexcept;
  std::string filename;

  _JPEGCache_get_args__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const JPEGCache_get_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const JPEGCache_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JPEGCache_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class JPEGCache_get_pargs {
 public:


  virtual ~JPEGCache_get_pargs() noexcept;
  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _JPEGCache_get_result__isset {
  _JPEGCache_get_result__isset() : success(false) {}
  bool success :1;
} _JPEGCache_get_result__isset;

class JPEGCache_get_result {
 public:

  JPEGCache_get_result(const JPEGCache_get_result&);
  JPEGCache_get_result& operator=(const JPEGCache_get_result&);
  JPEGCache_get_result() : success() {
  }

  virtual ~JPEGCache_get_result() noexcept;
  std::string success;

  _JPEGCache_get_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const JPEGCache_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const JPEGCache_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JPEGCache_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _JPEGCache_get_presult__isset {
  _JPEGCache_get_presult__isset() : success(false) {}
  bool success :1;
} _JPEGCache_get_presult__isset;

class JPEGCache_get_presult {
 public:


  virtual ~JPEGCache_get_presult() noexcept;
  std::string* success;

  _JPEGCache_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _JPEGCache_getWithROI_args__isset {
  _JPEGCache_getWithROI_args__isset() : filename(false), offset_x(false), offset_y(false), roi_w(false), roi_h(false) {}
  bool filename :1;
  bool offset_x :1;
  bool offset_y :1;
  bool roi_w :1;
  bool roi_h :1;
} _JPEGCache_getWithROI_args__isset;

class JPEGCache_getWithROI_args {
 public:

  JPEGCache_getWithROI_args(const JPEGCache_getWithROI_args&);
  JPEGCache_getWithROI_args& operator=(const JPEGCache_getWithROI_args&);
  JPEGCache_getWithROI_args() : filename(), offset_x(0), offset_y(0), roi_w(0), roi_h(0) {
  }

  virtual ~JPEGCache_getWithROI_args() noexcept;
  std::string filename;
  int32_t offset_x;
  int32_t offset_y;
  int32_t roi_w;
  int32_t roi_h;

  _JPEGCache_getWithROI_args__isset __isset;

  void __set_filename(const std::string& val);

  void __set_offset_x(const int32_t val);

  void __set_offset_y(const int32_t val);

  void __set_roi_w(const int32_t val);

  void __set_roi_h(const int32_t val);

  bool operator == (const JPEGCache_getWithROI_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(offset_x == rhs.offset_x))
      return false;
    if (!(offset_y == rhs.offset_y))
      return false;
    if (!(roi_w == rhs.roi_w))
      return false;
    if (!(roi_h == rhs.roi_h))
      return false;
    return true;
  }
  bool operator != (const JPEGCache_getWithROI_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JPEGCache_getWithROI_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class JPEGCache_getWithROI_pargs {
 public:


  virtual ~JPEGCache_getWithROI_pargs() noexcept;
  const std::string* filename;
  const int32_t* offset_x;
  const int32_t* offset_y;
  const int32_t* roi_w;
  const int32_t* roi_h;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _JPEGCache_getWithROI_result__isset {
  _JPEGCache_getWithROI_result__isset() : success(false) {}
  bool success :1;
} _JPEGCache_getWithROI_result__isset;

class JPEGCache_getWithROI_result {
 public:

  JPEGCache_getWithROI_result(const JPEGCache_getWithROI_result&);
  JPEGCache_getWithROI_result& operator=(const JPEGCache_getWithROI_result&);
  JPEGCache_getWithROI_result() : success() {
  }

  virtual ~JPEGCache_getWithROI_result() noexcept;
  std::string success;

  _JPEGCache_getWithROI_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const JPEGCache_getWithROI_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const JPEGCache_getWithROI_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JPEGCache_getWithROI_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _JPEGCache_getWithROI_presult__isset {
  _JPEGCache_getWithROI_presult__isset() : success(false) {}
  bool success :1;
} _JPEGCache_getWithROI_presult__isset;

class JPEGCache_getWithROI_presult {
 public:


  virtual ~JPEGCache_getWithROI_presult() noexcept;
  std::string* success;

  _JPEGCache_getWithROI_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _JPEGCache_put_args__isset {
  _JPEGCache_put_args__isset() : filenames(false) {}
  bool filenames :1;
} _JPEGCache_put_args__isset;

class JPEGCache_put_args {
 public:

  JPEGCache_put_args(const JPEGCache_put_args&);
  JPEGCache_put_args& operator=(const JPEGCache_put_args&);
  JPEGCache_put_args() : filenames() {
  }

  virtual ~JPEGCache_put_args() noexcept;
  std::string filenames;

  _JPEGCache_put_args__isset __isset;

  void __set_filenames(const std::string& val);

  bool operator == (const JPEGCache_put_args & rhs) const
  {
    if (!(filenames == rhs.filenames))
      return false;
    return true;
  }
  bool operator != (const JPEGCache_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JPEGCache_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class JPEGCache_put_pargs {
 public:


  virtual ~JPEGCache_put_pargs() noexcept;
  const std::string* filenames;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _JPEGCache_put_result__isset {
  _JPEGCache_put_result__isset() : success(false) {}
  bool success :1;
} _JPEGCache_put_result__isset;

class JPEGCache_put_result {
 public:

  JPEGCache_put_result(const JPEGCache_put_result&);
  JPEGCache_put_result& operator=(const JPEGCache_put_result&);
  JPEGCache_put_result() : success(0) {
  }

  virtual ~JPEGCache_put_result() noexcept;
  int32_t success;

  _JPEGCache_put_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const JPEGCache_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const JPEGCache_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const JPEGCache_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _JPEGCache_put_presult__isset {
  _JPEGCache_put_presult__isset() : success(false) {}
  bool success :1;
} _JPEGCache_put_presult__isset;

class JPEGCache_put_presult {
 public:


  virtual ~JPEGCache_put_presult() noexcept;
  int32_t* success;

  _JPEGCache_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class JPEGCacheClient : virtual public JPEGCacheIf {
 public:
  JPEGCacheClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  JPEGCacheClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::string& _return, const std::string& filename);
  void send_get(const std::string& filename);
  void recv_get(std::string& _return);
  void getWithROI(std::string& _return, const std::string& filename, const int32_t offset_x, const int32_t offset_y, const int32_t roi_w, const int32_t roi_h);
  void send_getWithROI(const std::string& filename, const int32_t offset_x, const int32_t offset_y, const int32_t roi_w, const int32_t roi_h);
  void recv_getWithROI(std::string& _return);
  int32_t put(const std::string& filenames);
  void send_put(const std::string& filenames);
  int32_t recv_put();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class JPEGCacheProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<JPEGCacheIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (JPEGCacheProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getWithROI(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  JPEGCacheProcessor(::std::shared_ptr<JPEGCacheIf> iface) :
    iface_(iface) {
    processMap_["get"] = &JPEGCacheProcessor::process_get;
    processMap_["getWithROI"] = &JPEGCacheProcessor::process_getWithROI;
    processMap_["put"] = &JPEGCacheProcessor::process_put;
  }

  virtual ~JPEGCacheProcessor() {}
};

class JPEGCacheProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  JPEGCacheProcessorFactory(const ::std::shared_ptr< JPEGCacheIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< JPEGCacheIfFactory > handlerFactory_;
};

class JPEGCacheMultiface : virtual public JPEGCacheIf {
 public:
  JPEGCacheMultiface(std::vector<std::shared_ptr<JPEGCacheIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~JPEGCacheMultiface() {}
 protected:
  std::vector<std::shared_ptr<JPEGCacheIf> > ifaces_;
  JPEGCacheMultiface() {}
  void add(::std::shared_ptr<JPEGCacheIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(std::string& _return, const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, filename);
    }
    ifaces_[i]->get(_return, filename);
    return;
  }

  void getWithROI(std::string& _return, const std::string& filename, const int32_t offset_x, const int32_t offset_y, const int32_t roi_w, const int32_t roi_h) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getWithROI(_return, filename, offset_x, offset_y, roi_w, roi_h);
    }
    ifaces_[i]->getWithROI(_return, filename, offset_x, offset_y, roi_w, roi_h);
    return;
  }

  int32_t put(const std::string& filenames) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(filenames);
    }
    return ifaces_[i]->put(filenames);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class JPEGCacheConcurrentClient : virtual public JPEGCacheIf {
 public:
  JPEGCacheConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  JPEGCacheConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::string& _return, const std::string& filename);
  int32_t send_get(const std::string& filename);
  void recv_get(std::string& _return, const int32_t seqid);
  void getWithROI(std::string& _return, const std::string& filename, const int32_t offset_x, const int32_t offset_y, const int32_t roi_w, const int32_t roi_h);
  int32_t send_getWithROI(const std::string& filename, const int32_t offset_x, const int32_t offset_y, const int32_t roi_w, const int32_t roi_h);
  void recv_getWithROI(std::string& _return, const int32_t seqid);
  int32_t put(const std::string& filenames);
  int32_t send_put(const std::string& filenames);
  int32_t recv_put(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
