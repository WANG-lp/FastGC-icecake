// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "JPEGCache.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::JPEGCache;

class JPEGCacheHandler : virtual public JPEGCacheIf {
 public:
  JPEGCacheHandler() {
    // Your initialization goes here
  }

  int32_t set_parameters(const int32_t seed, const double s1, const double s2, const double r1, const double r2) {
    // Your implementation goes here
    printf("set_parameters\n");
  }

  void get(std::string& _return, const std::string& filename) {
    // Your implementation goes here
    printf("get\n");
  }

  void getWithROI(std::string& _return, const std::string& filename, const int32_t offset_x, const int32_t offset_y, const int32_t roi_w, const int32_t roi_h) {
    // Your implementation goes here
    printf("getWithROI\n");
  }

  void getWithRandomCrop(std::string& _return, const std::string& filename) {
    // Your implementation goes here
    printf("getWithRandomCrop\n");
  }

  void getRAW(std::string& _return, const std::string& filename) {
    // Your implementation goes here
    printf("getRAW\n");
  }

  int32_t put(const std::string& filename, const std::string& content) {
    // Your implementation goes here
    printf("put\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<JPEGCacheHandler> handler(new JPEGCacheHandler());
  ::std::shared_ptr<TProcessor> processor(new JPEGCacheProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

